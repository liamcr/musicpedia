{"version":3,"sources":["config.js","components/SpotifyApiController.js","pages/GetStarted.js","pages/PageNotFound.js","components/DataPreview.js","components/PreviewList.js","components/SearchBar.js","pages/HomePage.js","components/PageHeader.js","components/AlbumArtist.js","components/TrackAlbum.js","components/AudioFeatures.js","components/TrackGeneralInfo.js","components/Player.js","components/SectionCard.js","components/AudioAnalysis.js","pages/Track.js","components/ArtistGeneralInfo.js","components/ArtistTopTracks.js","components/ArtistAlbums.js","pages/Artist.js","components/AlbumGeneralInfo.js","components/AlbumTracks.js","pages/Album.js","pages/SearchPage.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["config","clientID","redirectURI","scopes","homePageURL","SpotifyApiController","React","Component","apiRequest","requestType","endpoint","accessToken","data","a","async","axios","method","url","Object","entries","length","JSON","stringify","headers","Authorization","requestResponse","buildAuthenticationURI","authURI","concat","encodeURIComponent","join","isTokenExpired","currentTimeStamp","Math","floor","Date","now","authExpiry","sessionStorage","getItem","parseInt","isLoggedIn","parseURLHash","hash","window","location","substring","jsonHash","replace","parse","handleLogin","search","href","hashData","hasOwnProperty","expirationTime","setItem","toString","useStyles","makeStyles","card","padding","margin","minWidth","maxWidth","GetStarted","classes","Card","className","Typography","variant","gutterBottom","paragraph","Box","textAlign","Button","color","container","PageNotFound","theme","lineHeight","borderRadius","width","cardOpen","height","preliminaryInfo","display","cardContent","paddingBottom","dataImage","minHeight","details","flex","overflowX","collapsedDataEntry","expand","transform","transition","transitions","create","duration","shortest","expandOpen","moreInfoButton","position","right","DataPreview","props","useState","expanded","setExpanded","buildDurationString","durationMs","durationInSeconds","hours","minutes","seconds","slice","buildString","stringArr","reduce","prevString","nextString","buildGridRow","dataArr","map","entry","index","key","noWrap","dataType","id","heading","name","firstSubtitle","album","secondSubtitle","artists","artist","dataImageUrl","images","collapsedData","Duration","duration_ms","Explicit","explicit","Popularity","popularity","Followers","followers","total","toLocaleString","tracks","items","totalDur","nextSong","Tracks","total_tracks","Year","release_date","collapsedDataArr","clsx","elevation","CardMedia","image","title","Icon","AccountCircle","Tooltip","CardActions","disableSpacing","IconButton","onClick","aria-expanded","aria-label","ExpandMore","Collapse","in","timeout","unmountOnExit","CardContent","Grid","direction","justify","alignItems","listNotLoaded","row","marginTop","marginLeft","PreviewList","list","homePage","CircularProgress","limit","datum","searchBarMain","paddingRight","searchBarAppBar","SearchBar","query","setQuery","Paper","main","disabled","Search","InputBase","value","onChange","e","target","placeholder","fullWidth","onKeyDown","keyCode","preventDefault","searchBox","recommendationGrid","HomePage","userTopTracks","setUserTopTracks","userTopArtists","setUserTopArtists","userRecommendedAlbums","setUserRecommendedAlbums","trackRequestSent","setTrackRequestSent","albumRequestSent","setAlbumRequestSent","artistRequestSent","setArtistRequestSent","then","res","topTracks","albumArr","track","album_type","includes","push","getRecommendedAlbums","albums","spacing","item","xs","infoContainer","artistName","PageHeader","subtitle","trackAlbum","Link","artistImage","paddingTop","artistPlaceHolder","AlbumArtist","artistObj","setArtistObj","dataName","marginRight","TrackAlbum","albumObj","setAlbumObj","cumulativeVal","nextVal","track_number","cardContainer","cardTitle","dataWithInfo","typography","icon","popover","AudioFeatures","audioFeatures","setAudioFeatures","featuresRequestSent","setFeaturesRequestSet","infoRequested","setInfoRequested","anchorEl","setAnchorEl","handleOpen","event","currentTarget","List","ListItem","mode","Divider","time_signature","size","Info","round","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","valence","tempo","Popover","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","paper","Acousticness","Danceability","Energy","Instrumentalness","Liveness","Speechiness","Happiness","TrackGeneralInfo","available_markets","progressBar","Player","section","start","songPosition","setSongPosition","paused","setPaused","checkPositionInterval","useEffect","setInterval","player","getCurrentState","state","playerPaused","handlePause","clearInterval","playerReady","pause","_options","uris","uri","position_ms","PlayArrow","Pause","LinearProgress","sectionTitle","cardHeader","SectionCard","buildTimeString","sectionObj","endTime","buildIntervalString","confidence","titleBox","AudioAnalysis","sections","setSections","sectionRequestSent","setSectionRequestSent","gridContainer","Track","interval","useParams","trackObj","setTrackObj","setPlayer","playerAttemptedToBeSet","setPlayerAttemptedToBeSet","setPlayerReady","token","Spotify","undefined","getOAuthToken","cb","connect","success","console","log","on","initializePlayer","sm","md","nested","paddingLeft","nestedItem","ArtistGeneralInfo","disablePadding","genres","disableGutters","genre","ArtistTopTracks","setTopTracks","ArtistAlbums","setAlbums","albumIds","Artist","AlbumGeneralInfo","setTracks","trackIds","Album","searchResult","setSearchResult","albumsResult","setAlbumsResult","requestSent","setRequestSent","simplifiedAlbums","toLowerCase","getAlbumIds","About","titleText","cursor","App","localStorage","themeSetting","setThemeSetting","createMuiTheme","palette","type","primary","ThemeProvider","CssBaseline","AppBar","Toolbar","pathname","parsedPath","split","showSearchBar","edge","Brightness4","Brightness7","showLogout","clear","ExitToApp","exact","path","from","to","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80ec4fee.chunk.js","sourcesContent":["export const config = {\r\n  clientID: \"37ee8313ef2e4b628637c5c8d2c9f070\",\r\n  redirectURI: \"https://liamcr.github.io/musipedia/home/\",\r\n  scopes: [\r\n    \"user-top-read\",\r\n    \"user-library-read\",\r\n    \"streaming\",\r\n    \"user-read-email\",\r\n    \"user-read-private\",\r\n    \"user-modify-playback-state\"\r\n  ],\r\n  homePageURL: \"https://liamcr.github.io/musipedia\"\r\n};\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { config } from \"../config\";\r\n\r\nexport default class SpotifyApiController extends React.Component {\r\n  /*\r\n   * Params: requestType - String (GET, POST, etc..)\r\n   *         endpoint - String\r\n   *         accessToken - String\r\n   *         data - Object\r\n   * Returns: apiResponse - Object\r\n   * Desc: More readable api request method.\r\n   */\r\n  static apiRequest = async (requestType, endpoint, accessToken, data) => {\r\n    const requestResponse = await axios({\r\n      method: requestType,\r\n      url: endpoint,\r\n      data: Object.entries(data).length === 0 ? {} : JSON.stringify(data),\r\n      headers: {\r\n        Authorization: \"Bearer \" + accessToken\r\n      }\r\n    });\r\n\r\n    return requestResponse;\r\n  };\r\n\r\n  /*\r\n   * Params: none\r\n   * Returns: authURI - String\r\n   * Desc: Builds the URL to which the user should be redirected to log\r\n   * into Spotify.\r\n   */\r\n  static buildAuthenticationURI = () => {\r\n    let authURI = `https://accounts.spotify.com/authorize?client_id=${config.clientID}`;\r\n\r\n    authURI = authURI.concat(\r\n      `&redirect_uri=${encodeURIComponent(config.redirectURI)}`\r\n    );\r\n    authURI = authURI.concat(\r\n      `&scope=${encodeURIComponent(config.scopes.join(\" \"))}`\r\n    );\r\n    authURI = authURI.concat(\"&response_type=token\");\r\n\r\n    return authURI;\r\n  };\r\n\r\n  /*\r\n   * Params: none\r\n   * Returns: Boolean\r\n   * Desc: Determines whether or not the user's previously received Spotify\r\n   * access token is expired.\r\n   */\r\n  static isTokenExpired = () => {\r\n    let currentTimeStamp = Math.floor(Date.now() / 1000);\r\n    let authExpiry = sessionStorage.getItem(\"musicInfoTokenExpiration\");\r\n\r\n    if (authExpiry !== null) {\r\n      if (currentTimeStamp < parseInt(authExpiry)) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  /*\r\n   * Params: none\r\n   * Returns: Boolean\r\n   * Desc: Determines whether or not the user has previously logged into Spotify\r\n   * for use with this app, as well as if that authentication is still valid\r\n   * (i.e. not expired)\r\n   */\r\n  static isLoggedIn = () => {\r\n    let authToken = sessionStorage.getItem(\"musicInfoSpotifyAccessToken\");\r\n\r\n    if (authToken === null) {\r\n      return false;\r\n    } else {\r\n      return !this.isTokenExpired();\r\n    }\r\n  };\r\n\r\n  /*\r\n   * Params: none\r\n   * Returns: Object\r\n   * Desc: Converts the hash in the url from something like:\r\n   *     \"#access_token=abc&token_type=Bearer&expires_in=3600\"\r\n   * to something like:\r\n   *     {\r\n   *         access_token: \"abc\",\r\n   *         token_type: \"Bearer\",\r\n   *         expires_in: \"3600\"\r\n   *     }\r\n   */\r\n  static parseURLHash = () => {\r\n    let hash = window.location.hash.substring(1);\r\n    let jsonHash = `{\"${hash.replace(/&/g, '\",\"').replace(/=/g, '\":\"')}\"}`;\r\n\r\n    return hash ? JSON.parse(jsonHash) : {};\r\n  };\r\n\r\n  /*\r\n   * Params: none\r\n   * Returns: Void\r\n   * Desc: Handles the logic behind authenticating the user with Spotify. The user's\r\n   * Spotify authentication token will be updated if a new one has been requested, and\r\n   * the user will be redirected to the \"Get Started\" page if their token is either\r\n   * non-existant or expired.\r\n   */\r\n  static handleLogin = () => {\r\n    if (window.location.search === \"?error=access_denied\") {\r\n      // If the user has not given permission to use their account,\r\n      // redirect them back to the \"Get Started\" page\r\n      window.location.href = config.homePageURL;\r\n    }\r\n\r\n    let hashData = this.parseURLHash();\r\n\r\n    if (hashData.hasOwnProperty(\"access_token\")) {\r\n      let currentTimeStamp = Math.floor(Date.now() / 1000);\r\n\r\n      if (\r\n        hashData[\"access_token\"] !==\r\n        sessionStorage.getItem(\"musicInfoSpotifyAccessToken\")\r\n      ) {\r\n        let expirationTime =\r\n          currentTimeStamp + parseInt(hashData[\"expires_in\"]);\r\n\r\n        sessionStorage.setItem(\r\n          \"musicInfoSpotifyAccessToken\",\r\n          hashData[\"access_token\"]\r\n        );\r\n        sessionStorage.setItem(\r\n          \"musicInfoTokenExpiration\",\r\n          expirationTime.toString()\r\n        );\r\n      } else {\r\n        if (this.isTokenExpired()) {\r\n          window.location.href = config.homePageURL;\r\n        }\r\n      }\r\n    } else {\r\n      if (sessionStorage.getItem(\"musicInfoSpotifyAccessToken\") === null) {\r\n        window.location.href = config.homePageURL;\r\n      } else if (this.isTokenExpired()) {\r\n        window.location.href = config.homePageURL;\r\n      }\r\n    }\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport SpotifyApiController from \"../components/SpotifyApiController\";\r\nimport { Box, Button, Card, makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    padding: 10,\r\n    margin: \"20vh auto\",\r\n    minWidth: 235,\r\n    maxWidth: \"20%\"\r\n  }\r\n});\r\n\r\nexport default function GetStarted() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Welcome!\r\n      </Typography>\r\n      <Typography paragraph>\r\n        To start exploring tracks, albums, and artists, log into Spotify below!\r\n      </Typography>\r\n      <Box textAlign=\"center\">\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          href={SpotifyApiController.buildAuthenticationURI()}\r\n        >\r\n          Log In\r\n        </Button>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Typography, Box, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: \"center\",\r\n    margin: \"24px auto\"\r\n  }\r\n});\r\n\r\nexport default function PageNotFound() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={classes.container}>\r\n      <Typography variant=\"h1\">404</Typography>\r\n      <Typography variant=\"h2\" color=\"textSecondary\">\r\n        Page not found\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  CardMedia,\r\n  Typography,\r\n  makeStyles,\r\n  IconButton,\r\n  Collapse,\r\n  CardContent,\r\n  Grid,\r\n  Button,\r\n  Icon,\r\n  Tooltip\r\n} from \"@material-ui/core\";\r\nimport { AccountCircle, ExpandMore } from \"@material-ui/icons\";\r\nimport { config } from \"../config\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    lineHeight: 0,\r\n    borderRadius: 0,\r\n    width: \"100%\"\r\n  },\r\n  cardOpen: {\r\n    height: \"auto\"\r\n  },\r\n  preliminaryInfo: {\r\n    display: \"inline-flex\",\r\n    width: \"100%\"\r\n  },\r\n  cardContent: {\r\n    \"&:last-child\": {\r\n      paddingBottom: \"16px\"\r\n    }\r\n  },\r\n  dataImage: {\r\n    height: \"10vh\",\r\n    minHeight: \"100px\",\r\n    width: \"10vh\",\r\n    minWidth: \"100px\"\r\n  },\r\n  details: {\r\n    margin: \"auto 10px\",\r\n    flex: 1,\r\n    overflowX: \"auto\"\r\n  },\r\n  collapsedDataEntry: {\r\n    width: \"50%\",\r\n    display: \"inline-block\"\r\n  },\r\n  expand: {\r\n    transform: \"rotate(0deg)\",\r\n    transition: theme.transitions.create(\"transform\", {\r\n      duration: theme.transitions.duration.shortest\r\n    })\r\n  },\r\n  expandOpen: {\r\n    transform: \"rotate(180deg)\"\r\n  },\r\n  moreInfoButton: {\r\n    position: \"relative\",\r\n    right: 0\r\n  }\r\n}));\r\n\r\nexport default function DataPreview(props) {\r\n  let data;\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  // Converts a time interval in milliseconds to the format\r\n  // minutes:seconds\r\n  const buildDurationString = durationMs => {\r\n    const durationInSeconds = Math.floor(durationMs / 1000);\r\n    const hours = Math.floor(durationInSeconds / (60 * 60));\r\n    const minutes = Math.floor(durationInSeconds / 60) % 60;\r\n    const seconds = durationInSeconds - 60 * minutes - 60 * 60 * hours;\r\n\r\n    return `${hours > 0 ? `${hours}:` : \"\"}${\r\n      hours > 0 ? (\"0\" + minutes).slice(-2) : minutes\r\n    }:${(\"0\" + seconds).slice(-2)}`;\r\n  };\r\n\r\n  // Converts and array of strings to a comma-separated string\r\n  const buildString = stringArr => {\r\n    return stringArr.slice(1).reduce((prevString, nextString) => {\r\n      return `${prevString}, ${nextString}`;\r\n    }, stringArr[0]);\r\n  };\r\n\r\n  // Builds a row of data entries found in the collapsed section\r\n  // of the card\r\n  const buildGridRow = dataArr => {\r\n    return dataArr.map((entry, index) => (\r\n      <Box className={classes.collapsedDataEntry} key={index}>\r\n        <Typography noWrap variant=\"subtitle1\" display=\"inline\">\r\n          {`${entry[0]} `}\r\n        </Typography>\r\n        <Typography\r\n          noWrap\r\n          variant=\"subtitle1\"\r\n          display=\"inline\"\r\n          color=\"textSecondary\"\r\n        >\r\n          {entry[1]}\r\n        </Typography>\r\n      </Box>\r\n    ));\r\n  };\r\n\r\n  if (props.dataType === \"track\") {\r\n    data = {\r\n      id: props.data.id,\r\n      heading: props.data.name,\r\n      firstSubtitle: props.data.album.name,\r\n      secondSubtitle: buildString(\r\n        props.data.artists.map(artist => artist.name)\r\n      ),\r\n      dataImageUrl: props.data.album.images[0].url,\r\n      collapsedData: {\r\n        Duration: buildDurationString(props.data.duration_ms),\r\n        Explicit: props.data.explicit ? \"Yes\" : \"No\",\r\n        Popularity: props.data.popularity\r\n      }\r\n    };\r\n  } else if (props.dataType === \"artist\") {\r\n    data = {\r\n      id: props.data.id,\r\n      heading: props.data.name,\r\n      dataImageUrl:\r\n        props.data.images.length > 0 ? props.data.images[0].url : null,\r\n      collapsedData: {\r\n        Followers: props.data.followers.total.toLocaleString(),\r\n        Popularity: props.data.popularity\r\n      }\r\n    };\r\n  } else if (props.dataType === \"album\") {\r\n    data = {\r\n      id: props.data.id,\r\n      heading: props.data.name,\r\n      firstSubtitle: buildString(props.data.artists.map(artist => artist.name)),\r\n      dataImageUrl: props.data.images[0].url,\r\n      collapsedData: {\r\n        Duration: buildDurationString(\r\n          props.data.tracks.items.reduce(\r\n            (totalDur, nextSong) => totalDur + nextSong.duration_ms,\r\n            0\r\n          )\r\n        ),\r\n        Tracks: props.data.total_tracks,\r\n        Popularity: props.data.popularity,\r\n        Year: props.data.release_date.slice(0, 4)\r\n      }\r\n    };\r\n  }\r\n\r\n  let collapsedDataArr = Object.entries(data.collapsedData);\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.card, {\r\n        [classes.cardOpen]: expanded\r\n      })}\r\n      elevation={0}\r\n    >\r\n      <Box className={classes.preliminaryInfo}>\r\n        {data.dataImageUrl !== null ? (\r\n          <CardMedia\r\n            className={classes.dataImage}\r\n            image={data.dataImageUrl}\r\n            title={props.dataType === \"artist\" ? \"Artist\" : \"Album Art\"}\r\n          />\r\n        ) : (\r\n          <Icon className={classes.dataImage}>\r\n            <AccountCircle className={classes.dataImage} />\r\n          </Icon>\r\n        )}\r\n\r\n        <Box className={classes.details}>\r\n          <Tooltip title={`${data.heading}`}>\r\n            <Typography noWrap variant=\"h5\">\r\n              {`${data.heading}`}\r\n            </Typography>\r\n          </Tooltip>\r\n          {data.firstSubtitle && (\r\n            <Typography noWrap variant=\"body1\" color=\"textSecondary\">\r\n              {`${data.firstSubtitle}`}\r\n            </Typography>\r\n          )}\r\n          {data.secondSubtitle && (\r\n            <Typography noWrap variant=\"body1\" color=\"textSecondary\">\r\n              {`${data.secondSubtitle}`}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        <CardActions disableSpacing>\r\n          <IconButton\r\n            className={clsx(classes.expand, {\r\n              [classes.expandOpen]: expanded\r\n            })}\r\n            onClick={handleExpandClick}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMore />\r\n          </IconButton>\r\n        </CardActions>\r\n      </Box>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent className={classes.cardContent}>\r\n          <Box>\r\n            {buildGridRow(collapsedDataArr.slice(0, 2))}\r\n            {buildGridRow(collapsedDataArr.slice(2))}\r\n          </Box>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"flex-end\"\r\n          >\r\n            <Button\r\n              className={classes.moreInfoButton}\r\n              color=\"primary\"\r\n              href={`${config.homePageURL}/${props.dataType}/${data.id}`}\r\n            >\r\n              More Info\r\n            </Button>\r\n          </Grid>\r\n        </CardContent>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CircularProgress,\r\n  Typography,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport DataPreview from \"./DataPreview\";\r\n\r\nconst useStyles = makeStyles({\r\n  listNotLoaded: {\r\n    display: \"inline-block\",\r\n    width: \"400px\",\r\n    height: \"100px\"\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  },\r\n  title: {\r\n    marginTop: 16,\r\n    marginLeft: 16\r\n  }\r\n});\r\n\r\nexport default function PreviewList(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={props.data === null ? classes.listNotLoaded : classes.list}>\r\n      <Typography\r\n        variant=\"h5\"\r\n        gutterBottom\r\n        color=\"textSecondary\"\r\n        className={props.homePage ? \"\" : classes.title}\r\n      >\r\n        {props.title}\r\n      </Typography>\r\n      {props.data === null ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <Box>\r\n          {props.data.length > 0 && props.data[0] !== null ? (\r\n            props.data\r\n              .slice(0, props.limit)\r\n              .map((datum, index) => (\r\n                <DataPreview\r\n                  key={index}\r\n                  dataType={props.dataType}\r\n                  data={datum}\r\n                />\r\n              ))\r\n          ) : (\r\n            <Card elevation={0}>\r\n              <Typography\r\n                className={props.homePage ? \"\" : classes.title}\r\n                variant=\"h5\"\r\n                gutterBottom\r\n                color=\"textSecondary\"\r\n              >\r\n                No Results Found\r\n              </Typography>\r\n            </Card>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  IconButton,\r\n  Paper,\r\n  InputBase,\r\n  makeStyles,\r\n  Tooltip\r\n} from \"@material-ui/core\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport { config } from \"../config\";\r\n\r\nconst useStyles = makeStyles({\r\n  searchBarMain: {\r\n    display: \"inline-flex\",\r\n    paddingRight: \"1%\",\r\n    width: \"50%\"\r\n  },\r\n  searchBarAppBar: {\r\n    display: \"inline-flex\",\r\n    paddingRight: \"1%\",\r\n    maxWidth: \"25%\"\r\n  }\r\n});\r\n\r\nexport default function SearchBar(props) {\r\n  const classes = useStyles();\r\n  const [query, setQuery] = useState(props.query ? props.query : \"\");\r\n\r\n  return (\r\n    <Paper\r\n      className={props.main ? classes.searchBarMain : classes.searchBarAppBar}\r\n    >\r\n      <Tooltip title=\"Search\">\r\n        <IconButton\r\n          href={`${config.homePageURL}/search/${encodeURIComponent(query)}`}\r\n          disabled={query === \"\"}\r\n          aria-label=\"Search\"\r\n        >\r\n          <Search />\r\n        </IconButton>\r\n      </Tooltip>\r\n\r\n      <InputBase\r\n        value={query}\r\n        onChange={e => {\r\n          setQuery(e.target.value);\r\n        }}\r\n        placeholder=\"Search\"\r\n        fullWidth\r\n        onKeyDown={e => {\r\n          if (e.keyCode === 13 && query !== \"\") {\r\n            e.preventDefault();\r\n\r\n            window.location.href = `${\r\n              config.homePageURL\r\n            }/search/${encodeURIComponent(query)}`;\r\n          }\r\n        }}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport SpotifyApiController from \"../components/SpotifyApiController\";\r\nimport PreviewList from \"../components/PreviewList\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport { Box, Grid, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  searchBox: {\r\n    textAlign: \"center\",\r\n    padding: \"5vh 0\"\r\n  },\r\n  recommendationGrid: {\r\n    width: \"90%\",\r\n    margin: \"0 auto 5vh auto\"\r\n  }\r\n});\r\n\r\nexport default function HomePage() {\r\n  const classes = useStyles();\r\n\r\n  const [userTopTracks, setUserTopTracks] = useState(null);\r\n  const [userTopArtists, setUserTopArtists] = useState(null);\r\n  const [userRecommendedAlbums, setUserRecommendedAlbums] = useState(null);\r\n  const [trackRequestSent, setTrackRequestSent] = useState(false);\r\n  const [albumRequestSent, setAlbumRequestSent] = useState(false);\r\n  const [artistRequestSent, setArtistRequestSent] = useState(false);\r\n\r\n  // Gets a list of album ids based on the user's top tracks\r\n  const getRecommendedAlbums = topTracks => {\r\n    let albumArr = [];\r\n\r\n    for (let track of topTracks) {\r\n      if (\r\n        track.album.album_type === \"ALBUM\" &&\r\n        !albumArr.includes(track.album.id)\r\n      ) {\r\n        albumArr.push(track.album.id);\r\n      }\r\n    }\r\n\r\n    return albumArr;\r\n  };\r\n\r\n  const buildString = stringArr => {\r\n    return stringArr.slice(1).reduce((prevString, nextString) => {\r\n      return `${prevString},${nextString}`;\r\n    }, stringArr[0]);\r\n  };\r\n\r\n  SpotifyApiController.handleLogin();\r\n\r\n  if (!trackRequestSent) {\r\n    setTrackRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      \"https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=50\",\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setUserTopTracks(res.data.items);\r\n    });\r\n  }\r\n\r\n  if (!artistRequestSent) {\r\n    setArtistRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      \"https://api.spotify.com/v1/me/top/artists?time_range=short_term&limit=50\",\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setUserTopArtists(res.data.items);\r\n    });\r\n  }\r\n\r\n  if (userTopTracks && !albumRequestSent) {\r\n    setAlbumRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/albums?ids=${encodeURIComponent(\r\n        buildString(getRecommendedAlbums(userTopTracks))\r\n      )}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setUserRecommendedAlbums(res.data.albums);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Box className={classes.searchBox}>\r\n        <SearchBar main />\r\n      </Box>\r\n\r\n      <Grid\r\n        container\r\n        justify=\"space-around\"\r\n        spacing={3}\r\n        className={classes.recommendationGrid}\r\n      >\r\n        <Grid item xs={4}>\r\n          <PreviewList\r\n            limit={10}\r\n            homePage\r\n            title=\"Tracks\"\r\n            dataType=\"track\"\r\n            data={userTopTracks}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <PreviewList\r\n            limit={10}\r\n            homePage\r\n            title=\"Albums\"\r\n            dataType=\"album\"\r\n            data={userRecommendedAlbums}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <PreviewList\r\n            limit={10}\r\n            homePage\r\n            title=\"Artists\"\r\n            dataType=\"artist\"\r\n            data={userTopArtists}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardMedia,\r\n  makeStyles,\r\n  Icon,\r\n  Typography,\r\n  CircularProgress,\r\n  Link\r\n} from \"@material-ui/core\";\r\nimport { AccountCircle } from \"@material-ui/icons\";\r\nimport { config } from \"../config\";\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    display: \"flex\"\r\n  },\r\n  image: {\r\n    height: \"30vh\",\r\n    width: \"30vh\"\r\n  },\r\n  infoContainer: {\r\n    margin: \"auto 20px\",\r\n    overflowX: \"auto\",\r\n    flex: 1\r\n  },\r\n  artistName: {\r\n    display: \"inline\"\r\n  }\r\n});\r\n\r\nexport default function PageHeader(props) {\r\n  const classes = useStyles();\r\n\r\n  if (props.name === null) {\r\n    return (\r\n      <Card>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  } else {\r\n    return (\r\n      <Card className={classes.card}>\r\n        {props.images.length !== 0 ? (\r\n          <CardMedia\r\n            className={classes.image}\r\n            image={props.images[0].url}\r\n            title={props.subtitle || props.trackAlbum ? \"Album Art\" : \"Artist\"}\r\n          />\r\n        ) : (\r\n          <Icon className={classes.image}>\r\n            <AccountCircle className={classes.image} />\r\n          </Icon>\r\n        )}\r\n        <Box className={classes.infoContainer}>\r\n          <Typography noWrap variant=\"h1\">\r\n            {props.name}\r\n          </Typography>\r\n          <Box>\r\n            {props.trackAlbum && (\r\n              <Typography noWrap variant=\"h4\" color=\"textSecondary\">\r\n                <Link\r\n                  color=\"inherit\"\r\n                  href={`${config.homePageURL}/album/${props.trackAlbum.id}`}\r\n                >\r\n                  {props.trackAlbum.name}\r\n                </Link>\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n          <Box>\r\n            {props.artists &&\r\n              props.artists.map((artist, index) => (\r\n                <Typography\r\n                  key={index}\r\n                  noWrap\r\n                  variant=\"h4\"\r\n                  className={classes.artistName}\r\n                  color=\"textSecondary\"\r\n                >\r\n                  <Link\r\n                    color=\"inherit\"\r\n                    href={`${config.homePageURL}/artist/${artist.id}`}\r\n                  >\r\n                    {`${index !== 0 ? \", \" : \"\"}${artist.name}`}\r\n                  </Link>\r\n                </Typography>\r\n              ))}\r\n          </Box>\r\n          <Typography variant=\"h5\" color=\"textSecondary\">\r\n            {props.subtitle}\r\n          </Typography>\r\n        </Box>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardMedia,\r\n  CircularProgress,\r\n  Icon,\r\n  makeStyles,\r\n  Typography,\r\n  CardContent,\r\n  CardActions\r\n} from \"@material-ui/core\";\r\nimport SpotifyApiController from \"./SpotifyApiController\";\r\nimport { AccountCircle } from \"@material-ui/icons\";\r\nimport { config } from \"../config\";\r\n\r\nlet useStyles = makeStyles({\r\n  artistImage: {\r\n    height: 0,\r\n    paddingTop: \"100%\"\r\n  },\r\n  artistPlaceHolder: {\r\n    width: \"100%\",\r\n    height: \"100%\"\r\n  }\r\n});\r\n\r\nexport default function AlbumArtist(props) {\r\n  const classes = useStyles();\r\n\r\n  const [artistObj, setArtistObj] = useState(null);\r\n  const [artistRequestSent, setArtistRequestSent] = useState(false);\r\n\r\n  if (!artistRequestSent && props.album !== null) {\r\n    setArtistRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/artists/${props.album.artists[0].id}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setArtistObj(res.data);\r\n    });\r\n  }\r\n\r\n  if (artistObj === null) {\r\n    return (\r\n      <Card>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  } else {\r\n    return (\r\n      <Card>\r\n        {artistObj.images.length > 0 ? (\r\n          <CardMedia\r\n            className={classes.artistImage}\r\n            image={artistObj.images[0].url}\r\n            title=\"Artist\"\r\n          />\r\n        ) : (\r\n          <Icon className={classes.artistPlaceHolder}>\r\n            <AccountCircle className={classes.artistPlaceHolder} />\r\n          </Icon>\r\n        )}\r\n        <CardContent>\r\n          <Typography variant=\"h5\" color=\"textSecondary\" gutterBottom>\r\n            Artist\r\n          </Typography>\r\n          <Typography variant=\"h5\">{artistObj.name}</Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            href={`${config.homePageURL}/artist/${artistObj.id}`}\r\n            color=\"primary\"\r\n          >\r\n            More Info\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Card,\r\n  CardMedia,\r\n  CircularProgress,\r\n  Icon,\r\n  makeStyles,\r\n  Typography,\r\n  CardContent,\r\n  CardActions\r\n} from \"@material-ui/core\";\r\nimport SpotifyApiController from \"./SpotifyApiController\";\r\nimport { AccountCircle } from \"@material-ui/icons\";\r\nimport { config } from \"../config\";\r\n\r\nlet useStyles = makeStyles({\r\n  artistImage: {\r\n    height: 0,\r\n    paddingTop: \"100%\"\r\n  },\r\n  dataName: {\r\n    marginRight: 10\r\n  }\r\n});\r\n\r\nexport default function TrackAlbum(props) {\r\n  const classes = useStyles();\r\n\r\n  const [albumObj, setAlbumObj] = useState(null);\r\n  const [albumRequestSent, setAlbumRequestSent] = useState(false);\r\n\r\n  // Converts a time interval in milliseconds to the format\r\n  // hours:minutes:seconds\r\n  const buildDurationString = durationMs => {\r\n    const durationInSeconds = Math.floor(durationMs / 1000);\r\n    const hours = Math.floor(durationInSeconds / (60 * 60));\r\n    const minutes = Math.floor(durationInSeconds / 60) % 60;\r\n    const seconds = durationInSeconds - 60 * minutes - 60 * 60 * hours;\r\n\r\n    return `${hours > 0 ? `${hours}:` : \"\"}${\r\n      hours > 0 ? (\"0\" + minutes).slice(-2) : minutes\r\n    }:${(\"0\" + seconds).slice(-2)}`;\r\n  };\r\n\r\n  if (!albumRequestSent && props.track !== null) {\r\n    setAlbumRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/albums/${props.track.album.id}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setAlbumObj(res.data);\r\n    });\r\n  }\r\n\r\n  if (albumObj === null) {\r\n    return (\r\n      <Card>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  } else {\r\n    return (\r\n      <Card>\r\n        {albumObj.images.length > 0 ? (\r\n          <CardMedia\r\n            className={classes.artistImage}\r\n            image={albumObj.images[0].url}\r\n            title=\"Album\"\r\n          />\r\n        ) : (\r\n          <Icon>\r\n            <AccountCircle />\r\n          </Icon>\r\n        )}\r\n        <CardContent>\r\n          <Typography variant=\"h5\" color=\"textSecondary\" gutterBottom>\r\n            Album\r\n          </Typography>\r\n          <Typography variant=\"h5\">{albumObj.name}</Typography>\r\n          <Box>\r\n            <Typography\r\n              variant=\"h5\"\r\n              className={classes.dataName}\r\n              display=\"inline\"\r\n            >\r\n              Duration\r\n            </Typography>\r\n            <Typography variant=\"h5\" color=\"textSecondary\" display=\"inline\">\r\n              {buildDurationString(\r\n                albumObj.tracks.items\r\n                  .map(track => track.duration_ms)\r\n                  .reduce(\r\n                    (cumulativeVal, nextVal) => cumulativeVal + nextVal,\r\n                    0\r\n                  )\r\n              )}\r\n            </Typography>\r\n          </Box>\r\n          <Box>\r\n            <Typography\r\n              variant=\"h5\"\r\n              className={classes.dataName}\r\n              display=\"inline\"\r\n            >\r\n              Track Number\r\n            </Typography>\r\n            <Typography variant=\"h5\" color=\"textSecondary\" display=\"inline\">\r\n              {props.track.track_number}\r\n            </Typography>\r\n          </Box>\r\n          <Box>\r\n            <Typography\r\n              variant=\"h5\"\r\n              className={classes.dataName}\r\n              display=\"inline\"\r\n            >\r\n              Year\r\n            </Typography>\r\n            <Typography variant=\"h5\" color=\"textSecondary\" display=\"inline\">\r\n              {albumObj.release_date.slice(0, 4)}\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            href={`${config.homePageURL}/album/${albumObj.id}`}\r\n            color=\"primary\"\r\n          >\r\n            More Info\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Typography,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  Divider,\r\n  IconButton,\r\n  Popover\r\n} from \"@material-ui/core\";\r\nimport SpotifyApiController from \"./SpotifyApiController\";\r\nimport { Info } from \"@material-ui/icons\";\r\n\r\nlet useStyles = makeStyles(theme => ({\r\n  cardContainer: {\r\n    padding: 5\r\n  },\r\n  cardTitle: {\r\n    padding: \"16px 0 0 16px\"\r\n  },\r\n  dataWithInfo: {\r\n    display: \"flex\"\r\n  },\r\n  typography: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  icon: {\r\n    marginLeft: \"5%\"\r\n  },\r\n  popover: {\r\n    maxWidth: \"30%\"\r\n  }\r\n}));\r\n\r\nexport default function AudioFeatures(props) {\r\n  const classes = useStyles();\r\n\r\n  const [audioFeatures, setAudioFeatures] = useState(null);\r\n  const [featuresRequestSent, setFeaturesRequestSet] = useState(false);\r\n  const [infoRequested, setInfoRequested] = useState(\"\");\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const handleOpen = (event, infoRequested) => {\r\n    setInfoRequested(infoRequested);\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setInfoRequested(\"\");\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const content = {\r\n    Acousticness:\r\n      \"A confidence measure from 0 to 100 of whether the track is acoustic. 100 represents high confidence the track is acoustic.\",\r\n    Danceability:\r\n      \"Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0 is least danceable and 100 is most danceable.\",\r\n    Energy:\r\n      \"Energy is a measure from 0 to 100 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\",\r\n    Instrumentalness:\r\n      \"Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 100, the greater likelihood the track contains no vocal content. Values above 50 are intended to represent instrumental tracks, but confidence is higher as the value approaches 100.\",\r\n    Liveness:\r\n      \"Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 80 provides strong likelihood that the track is live.\",\r\n    Speechiness:\r\n      \"Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 100 the attribute value. Values above 66 describe tracks that are probably made entirely of spoken words. Values between 33 and 66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 33 most likely represent music and other non-speech-like tracks.\",\r\n    Happiness:\r\n      \"A measure from 0 to 100 describing the musical positiveness conveyed by a track. Tracks with high happiness sound more positive (e.g. cheerful, euphoric), while tracks with low happiness sound more negative (e.g. sad, depressed, angry).\"\r\n  };\r\n\r\n  const tonalPitchCounterparts = [\r\n    \"C\",\r\n    \"D♭\",\r\n    \"D\",\r\n    \"E♭\",\r\n    \"E\",\r\n    \"F\",\r\n    \"G♭\",\r\n    \"G\",\r\n    \"A♭\",\r\n    \"A\",\r\n    \"B♭\",\r\n    \"B\"\r\n  ];\r\n\r\n  const mode = [\"Minor\", \"Major\"];\r\n\r\n  if (!featuresRequestSent && props.track !== null) {\r\n    setFeaturesRequestSet(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/audio-features/${props.track.id}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setAudioFeatures(res.data);\r\n    });\r\n  }\r\n\r\n  if (props.track === null || audioFeatures === null) {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n          Audio Features\r\n        </Typography>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  } else {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography\r\n          variant=\"h5\"\r\n          gutterBottom\r\n          color=\"textSecondary\"\r\n          className={classes.cardTitle}\r\n        >\r\n          Audio Features\r\n        </Typography>\r\n        <List>\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Key</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {`${tonalPitchCounterparts[audioFeatures.key]} ${\r\n                    mode[audioFeatures.mode]\r\n                  }`}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Time Signature</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {audioFeatures.time_signature}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item className={classes.dataWithInfo}>\r\n                <Typography variant=\"h5\">Acousticness</Typography>\r\n                <IconButton\r\n                  className={classes.icon}\r\n                  onClick={e => handleOpen(e, \"Acousticness\")}\r\n                  size=\"small\"\r\n                >\r\n                  <Info />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {Math.round(audioFeatures.acousticness * 100)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item className={classes.dataWithInfo}>\r\n                <Typography variant=\"h5\">Danceability</Typography>\r\n                <IconButton\r\n                  onClick={e => handleOpen(e, \"Danceability\")}\r\n                  size=\"small\"\r\n                  className={classes.icon}\r\n                >\r\n                  <Info />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {Math.round(audioFeatures.danceability * 100)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item className={classes.dataWithInfo}>\r\n                <Typography variant=\"h5\">Energy</Typography>\r\n                <IconButton\r\n                  className={classes.icon}\r\n                  onClick={e => handleOpen(e, \"Energy\")}\r\n                  size=\"small\"\r\n                >\r\n                  <Info />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {Math.round(audioFeatures.energy * 100)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item className={classes.dataWithInfo}>\r\n                <Typography variant=\"h5\">Instrumentalness</Typography>\r\n                <IconButton\r\n                  className={classes.icon}\r\n                  onClick={e => handleOpen(e, \"Instrumentalness\")}\r\n                  size=\"small\"\r\n                >\r\n                  <Info />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {Math.round(audioFeatures.instrumentalness * 100)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item className={classes.dataWithInfo}>\r\n                <Typography variant=\"h5\">Liveness</Typography>\r\n                <IconButton\r\n                  className={classes.icon}\r\n                  onClick={e => handleOpen(e, \"Liveness\")}\r\n                  size=\"small\"\r\n                >\r\n                  <Info />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {Math.round(audioFeatures.liveness * 100)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Loudness</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {`${Math.round(audioFeatures.loudness)} dB`}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item className={classes.dataWithInfo}>\r\n                <Typography variant=\"h5\">Speechiness</Typography>\r\n                <IconButton\r\n                  className={classes.icon}\r\n                  onClick={e => handleOpen(e, \"Speechiness\")}\r\n                  size=\"small\"\r\n                >\r\n                  <Info />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {Math.round(audioFeatures.speechiness * 100)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item className={classes.dataWithInfo}>\r\n                <Typography variant=\"h5\">Happiness</Typography>\r\n                <IconButton\r\n                  className={classes.icon}\r\n                  onClick={e => handleOpen(e, \"Happiness\")}\r\n                  size=\"small\"\r\n                >\r\n                  <Info />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {Math.round(audioFeatures.valence * 100)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Tempo</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {`${Math.round(audioFeatures.tempo)} BPM`}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n        </List>\r\n        <Popover\r\n          open={Boolean(anchorEl)}\r\n          anchorEl={anchorEl}\r\n          onClose={handleClose}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\"\r\n          }}\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"center\"\r\n          }}\r\n          classes={{ paper: classes.popover }}\r\n        >\r\n          <Typography className={classes.typography} variant=\"h4\">\r\n            {infoRequested}\r\n          </Typography>\r\n          <Typography className={classes.typography} variant=\"body1\">\r\n            {content[infoRequested]}\r\n          </Typography>\r\n        </Popover>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Card,\r\n  Typography,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  Divider\r\n} from \"@material-ui/core\";\r\n\r\nlet useStyles = makeStyles(theme => ({\r\n  cardContainer: {\r\n    padding: 5\r\n  },\r\n  cardTitle: {\r\n    padding: \"16px 0 0 16px\"\r\n  }\r\n}));\r\n\r\nexport default function TrackGeneralInfo(props) {\r\n  const classes = useStyles();\r\n\r\n  // Converts a time interval in milliseconds to the format\r\n  // hours:minutes:seconds\r\n  const buildDurationString = durationMs => {\r\n    const durationInSeconds = Math.floor(durationMs / 1000);\r\n    const hours = Math.floor(durationInSeconds / (60 * 60));\r\n    const minutes = Math.floor(durationInSeconds / 60) % 60;\r\n    const seconds = durationInSeconds - 60 * minutes - 60 * 60 * hours;\r\n\r\n    return `${hours > 0 ? `${hours}:` : \"\"}${\r\n      hours > 0 ? (\"0\" + minutes).slice(-2) : minutes\r\n    }:${(\"0\" + seconds).slice(-2)}`;\r\n  };\r\n\r\n  if (props.track === null) {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n          Genral Info\r\n        </Typography>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  } else {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography\r\n          variant=\"h5\"\r\n          gutterBottom\r\n          color=\"textSecondary\"\r\n          className={classes.cardTitle}\r\n        >\r\n          Genral Info\r\n        </Typography>\r\n        <List>\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Duration</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {buildDurationString(props.track.duration_ms)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Explicit</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.track.explicit ? \"Yes\" : \"No\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Popularity</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.track.popularity}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Release Date</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.track.album.release_date}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Markets</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.track.available_markets.length}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n        </List>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { IconButton, LinearProgress, makeStyles } from \"@material-ui/core\";\r\nimport { PlayArrow, Pause } from \"@material-ui/icons\";\r\nimport SpotifyApiController from \"./SpotifyApiController\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  },\r\n  progressBar: {\r\n    width: \"100%\",\r\n    marginRight: 12,\r\n    borderRadius: 1000\r\n  }\r\n});\r\n\r\nexport default function Player(props) {\r\n  const classes = useStyles();\r\n\r\n  const [songPosition, setSongPosition] = useState(props.section.start);\r\n  const [paused, setPaused] = useState(true);\r\n\r\n  let checkPositionInterval = null;\r\n\r\n  useEffect(() => {\r\n    if (\r\n      songPosition < props.section.start ||\r\n      songPosition > props.section.start + props.section.duration\r\n    ) {\r\n      if (!paused) {\r\n        handlePause();\r\n      }\r\n      return;\r\n    }\r\n    const id = setInterval(() => {\r\n      if (props.player !== null) {\r\n        props.player.getCurrentState().then(state => {\r\n          if (!state) {\r\n            return;\r\n          }\r\n          let { position, playerPaused } = state;\r\n\r\n          if (\r\n            position / 1000 > props.section.start + props.section.duration ||\r\n            position / 1000 < props.section.start\r\n          ) {\r\n            setPaused(true);\r\n            setSongPosition(props.section.start);\r\n          } else if (\r\n            position / 1000 < props.section.start + props.section.duration &&\r\n            position / 1000 > props.section.start &&\r\n            paused &&\r\n            !playerPaused\r\n          ) {\r\n            handlePause();\r\n          } else {\r\n            setSongPosition(position / 1000);\r\n          }\r\n        });\r\n      }\r\n    }, 100);\r\n    return () => clearInterval(id);\r\n  });\r\n\r\n  const handlePause = () => {\r\n    if (props.playerReady) {\r\n      setPaused(true);\r\n      clearInterval(checkPositionInterval);\r\n      props.player.pause();\r\n    }\r\n  };\r\n\r\n  const checkSongPosition = () => {\r\n    if (songPosition > props.section.start + props.section.duration) {\r\n      handlePause();\r\n      clearInterval(checkPositionInterval);\r\n    }\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    if (props.playerReady) {\r\n      SpotifyApiController.apiRequest(\r\n        \"PUT\",\r\n        `https://api.spotify.com/v1/me/player/play?device_id=${props.player._options.id}`,\r\n        sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n        {\r\n          uris: [props.uri],\r\n          position_ms: props.section.start * 1000\r\n        }\r\n      ).then(() => {\r\n        setSongPosition(props.section.start);\r\n        setPaused(false);\r\n\r\n        checkPositionInterval = setInterval(() => checkSongPosition(), 200);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {paused ? (\r\n        <IconButton color=\"primary\" onClick={handlePlay}>\r\n          <PlayArrow />\r\n        </IconButton>\r\n      ) : (\r\n        <IconButton color=\"primary\" onClick={handlePause}>\r\n          <Pause />\r\n        </IconButton>\r\n      )}\r\n      <LinearProgress\r\n        variant=\"determinate\"\r\n        className={classes.progressBar}\r\n        value={\r\n          ((songPosition - props.section.start) * 100) / props.section.duration\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  Typography,\r\n  makeStyles,\r\n  IconButton,\r\n  Collapse,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport { ExpandMore } from \"@material-ui/icons\";\r\nimport Player from \"./Player\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    lineHeight: 0,\r\n    borderRadius: 0,\r\n    width: \"100%\"\r\n  },\r\n  cardOpen: {\r\n    height: \"auto\"\r\n  },\r\n  sectionTitle: {\r\n    marginRight: 10\r\n  },\r\n  cardHeader: {\r\n    display: \"inline-flex\",\r\n    width: \"100%\"\r\n  },\r\n  cardContent: {\r\n    \"&:last-child\": {\r\n      paddingBottom: \"16px\"\r\n    }\r\n  },\r\n  dataImage: {\r\n    height: \"10vh\",\r\n    minHeight: \"100px\",\r\n    width: \"10vh\",\r\n    minWidth: \"100px\"\r\n  },\r\n  details: {\r\n    margin: \"auto 10px\",\r\n    flex: 1,\r\n    overflowX: \"auto\"\r\n  },\r\n  collapsedDataEntry: {\r\n    width: \"50%\",\r\n    display: \"inline-block\"\r\n  },\r\n  expand: {\r\n    transform: \"rotate(0deg)\",\r\n    transition: theme.transitions.create(\"transform\", {\r\n      duration: theme.transitions.duration.shortest\r\n    })\r\n  },\r\n  expandOpen: {\r\n    transform: \"rotate(180deg)\"\r\n  },\r\n  moreInfoButton: {\r\n    position: \"relative\",\r\n    right: 0\r\n  }\r\n}));\r\n\r\nexport default function SectionCard(props) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const tonalPitchCounterparts = [\r\n    \"C\",\r\n    \"D♭\",\r\n    \"D\",\r\n    \"E♭\",\r\n    \"E\",\r\n    \"F\",\r\n    \"G♭\",\r\n    \"G\",\r\n    \"A♭\",\r\n    \"A\",\r\n    \"B♭\",\r\n    \"B\"\r\n  ];\r\n  const mode = [\"Minor\", \"Major\"];\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  // Converts a time in seconds to the format\r\n  // hours:minutes:seconds\r\n  const buildTimeString = durationInSeconds => {\r\n    const hours = Math.floor(durationInSeconds / (60 * 60));\r\n    const minutes = Math.floor(durationInSeconds / 60) % 60;\r\n    const seconds = Math.floor(\r\n      durationInSeconds - 60 * minutes - 60 * 60 * hours\r\n    );\r\n\r\n    return `${hours > 0 ? `${hours}:` : \"\"}${\r\n      hours > 0 ? (\"0\" + minutes).slice(-2) : minutes\r\n    }:${(\"0\" + seconds).slice(-2)}`;\r\n  };\r\n\r\n  const buildIntervalString = sectionObj => {\r\n    const endTime = sectionObj.start + sectionObj.duration;\r\n\r\n    return `${buildTimeString(sectionObj.start)} - ${buildTimeString(endTime)}`;\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className={clsx(classes.card, {\r\n        [classes.cardOpen]: expanded\r\n      })}\r\n      elevation={0}\r\n    >\r\n      <Box className={classes.cardHeader}>\r\n        <Box className={classes.details}>\r\n          <Typography\r\n            noWrap\r\n            display=\"inline\"\r\n            className={classes.sectionTitle}\r\n            variant=\"h5\"\r\n          >\r\n            {`Section ${props.index + 1}`}\r\n          </Typography>\r\n          <Typography\r\n            noWrap\r\n            variant=\"h5\"\r\n            display=\"inline\"\r\n            color=\"textSecondary\"\r\n          >\r\n            {buildIntervalString(props.section)}\r\n          </Typography>\r\n        </Box>\r\n        <CardActions disableSpacing>\r\n          <IconButton\r\n            className={clsx(classes.expand, {\r\n              [classes.expandOpen]: expanded\r\n            })}\r\n            onClick={handleExpandClick}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMore />\r\n          </IconButton>\r\n        </CardActions>\r\n      </Box>\r\n      <Player\r\n        player={props.player}\r\n        section={props.section}\r\n        uri={props.uri}\r\n        playerReady={props.playerReady}\r\n      />\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent className={classes.cardContent}>\r\n          <Box className={classes.collapsedDataEntry}>\r\n            <Typography noWrap variant=\"subtitle1\" display=\"inline\">\r\n              {`Duration `}\r\n            </Typography>\r\n            <Typography\r\n              noWrap\r\n              variant=\"subtitle1\"\r\n              display=\"inline\"\r\n              color=\"textSecondary\"\r\n            >\r\n              {buildTimeString(props.section.duration)}\r\n            </Typography>\r\n          </Box>\r\n          <Box className={classes.collapsedDataEntry}>\r\n            <Typography noWrap variant=\"subtitle1\" display=\"inline\">\r\n              {`Confidence `}\r\n            </Typography>\r\n            <Typography\r\n              noWrap\r\n              variant=\"subtitle1\"\r\n              display=\"inline\"\r\n              color=\"textSecondary\"\r\n            >\r\n              {Math.round(props.section.confidence * 100)}\r\n            </Typography>\r\n          </Box>\r\n          <Box className={classes.collapsedDataEntry}>\r\n            <Typography noWrap variant=\"subtitle1\" display=\"inline\">\r\n              {`Loudness `}\r\n            </Typography>\r\n            <Typography\r\n              noWrap\r\n              variant=\"subtitle1\"\r\n              display=\"inline\"\r\n              color=\"textSecondary\"\r\n            >\r\n              {`${Math.round(props.section.loudness)} dB`}\r\n            </Typography>\r\n          </Box>\r\n          <Box className={classes.collapsedDataEntry}>\r\n            <Typography noWrap variant=\"subtitle1\" display=\"inline\">\r\n              {`Tempo `}\r\n            </Typography>\r\n            <Typography\r\n              noWrap\r\n              variant=\"subtitle1\"\r\n              display=\"inline\"\r\n              color=\"textSecondary\"\r\n            >\r\n              {`${Math.round(props.section.tempo)} BPM`}\r\n            </Typography>\r\n          </Box>\r\n          <Box className={classes.collapsedDataEntry}>\r\n            <Typography noWrap variant=\"subtitle1\" display=\"inline\">\r\n              {`Key `}\r\n            </Typography>\r\n            <Typography\r\n              noWrap\r\n              variant=\"subtitle1\"\r\n              display=\"inline\"\r\n              color=\"textSecondary\"\r\n            >\r\n              {`${tonalPitchCounterparts[props.section.key]} ${\r\n                mode[props.section.mode]\r\n              }`}\r\n            </Typography>\r\n          </Box>\r\n          <Box className={classes.collapsedDataEntry}>\r\n            <Typography noWrap variant=\"subtitle1\" display=\"inline\">\r\n              {`Time Signature `}\r\n            </Typography>\r\n            <Typography\r\n              noWrap\r\n              variant=\"subtitle1\"\r\n              display=\"inline\"\r\n              color=\"textSecondary\"\r\n            >\r\n              {props.section.time_signature}\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Collapse>\r\n    </Card>\r\n\r\n    // <Card\r\n    //   className={clsx(classes.card, {\r\n    //     [classes.cardOpen]: expanded\r\n    //   })}\r\n    //   elevation={0}\r\n    // >\r\n    //   <Box className={classes.preliminaryInfo}>\r\n    //     {data.dataImageUrl !== null ? (\r\n    //       <CardMedia\r\n    //         className={classes.dataImage}\r\n    //         image={data.dataImageUrl}\r\n    //         title={props.dataType === \"artist\" ? \"Artist\" : \"Album Art\"}\r\n    //       />\r\n    //     ) : (\r\n    //       <Icon className={classes.dataImage}>\r\n    //         <AccountCircle className={classes.dataImage} />\r\n    //       </Icon>\r\n    //     )}\r\n\r\n    //     <Box className={classes.details}>\r\n    //       <Tooltip title={`${data.heading}`}>\r\n    //         <Typography noWrap variant=\"h5\">\r\n    //           {`${data.heading}`}\r\n    //         </Typography>\r\n    //       </Tooltip>\r\n    //       {data.firstSubtitle && (\r\n    //         <Typography noWrap variant=\"body1\" color=\"textSecondary\">\r\n    //           {`${data.firstSubtitle}`}\r\n    //         </Typography>\r\n    //       )}\r\n    //       {data.secondSubtitle && (\r\n    //         <Typography noWrap variant=\"body1\" color=\"textSecondary\">\r\n    //           {`${data.secondSubtitle}`}\r\n    //         </Typography>\r\n    //       )}\r\n    //     </Box>\r\n    //     <CardActions disableSpacing>\r\n    //       <IconButton\r\n    //         className={clsx(classes.expand, {\r\n    //           [classes.expandOpen]: expanded\r\n    //         })}\r\n    //         onClick={handleExpandClick}\r\n    //         aria-expanded={expanded}\r\n    //         aria-label=\"show more\"\r\n    //       >\r\n    //         <ExpandMore />\r\n    //       </IconButton>\r\n    //     </CardActions>\r\n    //   </Box>\r\n    //   <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n    //     <CardContent className={classes.cardContent}>\r\n    //       <Box>\r\n    //         {buildGridRow(collapsedDataArr.slice(0, 2))}\r\n    //         {buildGridRow(collapsedDataArr.slice(2))}\r\n    //       </Box>\r\n    //       <Grid\r\n    //         container\r\n    //         direction=\"column\"\r\n    //         justify=\"center\"\r\n    //         alignItems=\"flex-end\"\r\n    //       >\r\n    //         <Button\r\n    //           className={classes.moreInfoButton}\r\n    //           color=\"primary\"\r\n    //           href={`${config.homePageURL}/${props.dataType}/${data.id}`}\r\n    //         >\r\n    //           More Info\r\n    //         </Button>\r\n    //       </Grid>\r\n    //     </CardContent>\r\n    //   </Collapse>\r\n    // </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  CircularProgress,\r\n  Typography,\r\n  makeStyles,\r\n  Divider,\r\n  IconButton,\r\n  Popover\r\n} from \"@material-ui/core\";\r\nimport SectionCard from \"./SectionCard\";\r\nimport SpotifyApiController from \"./SpotifyApiController\";\r\nimport { Info } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  listNotLoaded: {\r\n    display: \"inline-block\",\r\n    width: \"400px\",\r\n    height: \"100px\"\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  },\r\n  titleBox: {\r\n    marginTop: 21,\r\n    marginLeft: 21,\r\n    display: \"flex\",\r\n    alignItems: \"center\"\r\n  },\r\n  icon: {\r\n    marginLeft: \"3%\"\r\n  },\r\n  typography: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  popover: {\r\n    maxWidth: \"30%\"\r\n  }\r\n}));\r\n\r\nexport default function AudioAnalysis(props) {\r\n  const classes = useStyles();\r\n\r\n  const [sections, setSections] = useState(null);\r\n  const [sectionRequestSent, setSectionRequestSent] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const handleOpen = event => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  if (!sectionRequestSent && props.track !== null) {\r\n    setSectionRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/audio-analysis/${props.track.id}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setSections(res.data.sections);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className={props.data === null ? classes.listNotLoaded : classes.list}\r\n    >\r\n      <Box className={classes.titleBox}>\r\n        <Typography variant=\"h5\" color=\"textSecondary\">\r\n          Audio Analysis\r\n        </Typography>\r\n        <IconButton className={classes.icon} onClick={handleOpen} size=\"small\">\r\n          <Info />\r\n        </IconButton>\r\n        <Popover\r\n          open={Boolean(anchorEl)}\r\n          anchorEl={anchorEl}\r\n          onClose={handleClose}\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\"\r\n          }}\r\n          transformOrigin={{\r\n            vertical: \"top\",\r\n            horizontal: \"center\"\r\n          }}\r\n          classes={{ paper: classes.popover }}\r\n        >\r\n          <Typography className={classes.typography} variant=\"h4\">\r\n            Audio Analysis\r\n          </Typography>\r\n          <Typography className={classes.typography} variant=\"body1\">\r\n            Audio Analysis provides low-level audio analysis for all of the\r\n            tracks in the Spotify catalog.\r\n          </Typography>\r\n          <Typography className={classes.typography} variant=\"body1\">\r\n            Sections are defined by large variations in rhythm or timbre, e.g.\r\n            chorus, verse, bridge, guitar solo, etc. Each section contains its\r\n            own descriptions of tempo, key, time signature, and loudness.\r\n          </Typography>\r\n        </Popover>\r\n      </Box>\r\n      {props.data === null || sections === null ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <Box>\r\n          {sections.length > 0 && sections[0] !== null ? (\r\n            sections.map((section, index) => (\r\n              <div key={index}>\r\n                <SectionCard\r\n                  index={index}\r\n                  player={props.player}\r\n                  section={section}\r\n                  uri={props.track.uri}\r\n                  playerReady={props.playerReady}\r\n                />\r\n                <Divider />\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <Card elevation={0}>\r\n              <Typography\r\n                className={classes.title}\r\n                variant=\"h5\"\r\n                gutterBottom\r\n                color=\"textSecondary\"\r\n              >\r\n                No Results Found\r\n              </Typography>\r\n            </Card>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\nimport PageHeader from \"../components/PageHeader\";\r\nimport AlbumArtist from \"../components/AlbumArtist\";\r\nimport TrackAlbum from \"../components/TrackAlbum\";\r\nimport AudioFeatures from \"../components/AudioFeatures\";\r\nimport SpotifyApiController from \"../components/SpotifyApiController\";\r\nimport TrackGeneralInfo from \"../components/TrackGeneralInfo\";\r\nimport AudioAnalysis from \"../components/AudioAnalysis\";\r\nimport { config } from \"../config\";\r\n\r\nconst useStyles = makeStyles({\r\n  gridContainer: {\r\n    width: \"90%\",\r\n    margin: \"10px auto\"\r\n  }\r\n});\r\n\r\nexport default function Track() {\r\n  let { id } = useParams();\r\n  let interval;\r\n  const classes = useStyles();\r\n\r\n  const [trackObj, setTrackObj] = useState(null);\r\n  const [trackRequestSent, setTrackRequestSent] = useState(false);\r\n  const [player, setPlayer] = useState(null);\r\n  const [playerAttemptedToBeSet, setPlayerAttemptedToBeSet] = useState(false);\r\n  const [playerReady, setPlayerReady] = useState(false);\r\n\r\n  const initializePlayer = (name, token) => {\r\n    if (window.Spotify !== null && window.Spotify !== undefined) {\r\n      let player = new window.Spotify.Player({\r\n        name: name,\r\n        getOAuthToken: cb => {\r\n          cb(token);\r\n        }\r\n      });\r\n      clearInterval(interval);\r\n      player.connect().then(success => {\r\n        if (success) {\r\n          console.log(\"Successful\");\r\n\r\n          player.on(\"ready\", () => {\r\n            setPlayerReady(true);\r\n          });\r\n        }\r\n      });\r\n\r\n      setPlayer(player);\r\n    }\r\n  };\r\n\r\n  if (!SpotifyApiController.isLoggedIn()) {\r\n    window.location.href = config.homePageURL;\r\n  }\r\n\r\n  if (!trackRequestSent) {\r\n    setTrackRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/tracks/${id}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setTrackObj(res.data);\r\n    });\r\n  }\r\n\r\n  if (!playerAttemptedToBeSet) {\r\n    setPlayerAttemptedToBeSet(true);\r\n\r\n    interval = setInterval(() => {\r\n      initializePlayer(\r\n        \"Test\",\r\n        sessionStorage.getItem(\"musicInfoSpotifyAccessToken\")\r\n      );\r\n    }, 500);\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={3}\r\n      justify=\"center\"\r\n      className={classes.gridContainer}\r\n    >\r\n      <Grid item xs={12}>\r\n        <PageHeader\r\n          name={trackObj ? trackObj.name : null}\r\n          artists={trackObj ? trackObj.artists : null}\r\n          trackAlbum={trackObj ? trackObj.album : null}\r\n          images={trackObj ? trackObj.album.images : null}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <TrackAlbum track={trackObj} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <AlbumArtist album={trackObj ? trackObj : null} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <TrackGeneralInfo track={trackObj} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <AudioFeatures track={trackObj} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <AudioAnalysis\r\n          track={trackObj}\r\n          player={player}\r\n          playerReady={playerReady}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  Typography,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  Divider\r\n} from \"@material-ui/core\";\r\n\r\nlet useStyles = makeStyles(theme => ({\r\n  cardContainer: {\r\n    padding: 5,\r\n    paddingBottom: 21\r\n  },\r\n  cardTitle: {\r\n    padding: \"16px 0 0 16px\"\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4)\r\n  },\r\n  nestedItem: {\r\n    padding: 0\r\n  }\r\n}));\r\n\r\nexport default function ArtistGeneralInfo(props) {\r\n  const classes = useStyles();\r\n\r\n  if (props.artist === null) {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n          Genral Info\r\n        </Typography>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  } else {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography\r\n          variant=\"h5\"\r\n          gutterBottom\r\n          color=\"textSecondary\"\r\n          className={classes.cardTitle}\r\n        >\r\n          Genral Info\r\n        </Typography>\r\n        <List>\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Followers\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n                  {props.artist.followers.total.toLocaleString()}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Popularity</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.artist.popularity}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Genres:</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n        </List>\r\n        <List disablePadding className={classes.nested}>\r\n          {props.artist.genres.length > 0 ? (\r\n            <Box>\r\n              <ListItem disableGutters className={classes.nestedItem}>\r\n                <Grid container justify=\"space-between\">\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      {props.artist.genres[0]}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n            </Box>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {props.artist.genres.slice(1).map((genre, index) => (\r\n            <Box key={index}>\r\n              <Divider />\r\n              <ListItem disableGutters className={classes.nestedItem}>\r\n                <Grid container justify=\"space-between\">\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      {genre}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n            </Box>\r\n          ))}\r\n        </List>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PreviewList from \"./PreviewList\";\r\nimport {\r\n  Card,\r\n  Typography,\r\n  CircularProgress,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport SpotifyApiController from \"./SpotifyApiController\";\r\n\r\nlet useStyles = makeStyles(theme => ({\r\n  cardContainer: {\r\n    padding: 5\r\n  }\r\n}));\r\n\r\nexport default function ArtistTopTracks(props) {\r\n  const classes = useStyles();\r\n\r\n  const [topTracks, setTopTracks] = useState(null);\r\n  const [trackRequestSent, setTrackRequestSent] = useState(false);\r\n\r\n  if (!trackRequestSent && props !== null) {\r\n    setTrackRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/artists/${props.id}/top-tracks?country=from_token`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setTopTracks(res.data);\r\n    });\r\n  }\r\n\r\n  if (props === null || topTracks === null) {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n          Top Tracks\r\n        </Typography>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  }\r\n  return (\r\n    <Card>\r\n      <PreviewList\r\n        limit={10}\r\n        data={topTracks.tracks}\r\n        title=\"Top Tracks\"\r\n        dataType=\"track\"\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PreviewList from \"./PreviewList\";\r\nimport {\r\n  Card,\r\n  Typography,\r\n  CircularProgress,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport SpotifyApiController from \"./SpotifyApiController\";\r\n\r\nlet useStyles = makeStyles(theme => ({\r\n  cardContainer: {\r\n    padding: 5\r\n  }\r\n}));\r\n\r\nexport default function ArtistAlbums(props) {\r\n  const classes = useStyles();\r\n\r\n  const [albums, setAlbums] = useState(null);\r\n  const [albumRequestSent, setAlbumRequestSent] = useState(false);\r\n\r\n  const buildString = stringArr => {\r\n    return stringArr.slice(1).reduce((prevString, nextString) => {\r\n      return `${prevString},${nextString}`;\r\n    }, stringArr[0]);\r\n  };\r\n\r\n  if (!albumRequestSent && props !== null) {\r\n    setAlbumRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/artists/${props.id}/albums?include_groups=album&country=from_token`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      let albumIds = res.data.items.map(album => album.id);\r\n\r\n      SpotifyApiController.apiRequest(\r\n        \"GET\",\r\n        `https://api.spotify.com/v1/albums?ids=${encodeURIComponent(\r\n          buildString(albumIds)\r\n        )}`,\r\n        sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n        {}\r\n      ).then(res => {\r\n        setAlbums(res.data.albums);\r\n      });\r\n    });\r\n  }\r\n\r\n  if (props === null || albums === null) {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n          Albums\r\n        </Typography>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  }\r\n  return (\r\n    <Card>\r\n      <PreviewList limit={1000} data={albums} title=\"Albums\" dataType=\"album\" />\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\nimport PageHeader from \"../components/PageHeader\";\r\nimport ArtistGeneralInfo from \"../components/ArtistGeneralInfo\";\r\nimport ArtistTopTracks from \"../components/ArtistTopTracks\";\r\nimport ArtistAlbums from \"../components/ArtistAlbums\";\r\nimport SpotifyApiController from \"../components/SpotifyApiController\";\r\nimport { config } from \"../config\";\r\n\r\nconst useStyles = makeStyles({\r\n  gridContainer: {\r\n    width: \"90%\",\r\n    margin: \"10px auto\"\r\n  }\r\n});\r\n\r\nexport default function Artist() {\r\n  let { id } = useParams();\r\n  const classes = useStyles();\r\n\r\n  const [artistObj, setArtistObj] = useState(null);\r\n  const [artistRequestSent, setArtistRequestSent] = useState(false);\r\n\r\n  if (!SpotifyApiController.isLoggedIn()) {\r\n    window.location.href = config.homePageURL;\r\n  }\r\n\r\n  if (!artistRequestSent) {\r\n    setArtistRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/artists/${id}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setArtistObj(res.data);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={3}\r\n      justify=\"center\"\r\n      className={classes.gridContainer}\r\n    >\r\n      <Grid item xs={12}>\r\n        <PageHeader\r\n          name={artistObj ? artistObj.name : null}\r\n          images={artistObj ? artistObj.images : null}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <ArtistGeneralInfo artist={artistObj} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <ArtistTopTracks id={id} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <ArtistAlbums id={id} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Card,\r\n  Typography,\r\n  makeStyles,\r\n  CircularProgress,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  Divider\r\n} from \"@material-ui/core\";\r\n\r\nlet useStyles = makeStyles(theme => ({\r\n  cardContainer: {\r\n    padding: 5,\r\n    paddingBottom: 16\r\n  },\r\n  cardTitle: {\r\n    padding: \"16px 0 0 16px\"\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4)\r\n  },\r\n  nestedItem: {\r\n    padding: 0\r\n  }\r\n}));\r\n\r\nexport default function AlbumGeneralInfo(props) {\r\n  const classes = useStyles();\r\n\r\n  // Converts a time interval in milliseconds to the format\r\n  // minutes:seconds\r\n  const buildDurationString = durationMs => {\r\n    const durationInSeconds = Math.floor(durationMs / 1000);\r\n    const hours = Math.floor(durationInSeconds / (60 * 60));\r\n    const minutes = Math.floor(durationInSeconds / 60) % 60;\r\n    const seconds = durationInSeconds - 60 * minutes - 60 * 60 * hours;\r\n\r\n    return `${hours > 0 ? `${hours}:` : \"\"}${\r\n      hours > 0 ? (\"0\" + minutes).slice(-2) : minutes\r\n    }:${(\"0\" + seconds).slice(-2)}`;\r\n  };\r\n\r\n  if (props.album === null) {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n          Genral Info\r\n        </Typography>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  } else {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography\r\n          variant=\"h5\"\r\n          gutterBottom\r\n          color=\"textSecondary\"\r\n          className={classes.cardTitle}\r\n        >\r\n          Genral Info\r\n        </Typography>\r\n        <List>\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Tracks</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.album.total_tracks}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Duration</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {buildDurationString(\r\n                    props.album.tracks.items\r\n                      .map(track => track.duration_ms)\r\n                      .reduce(\r\n                        (cumulativeVal, nextVal) => cumulativeVal + nextVal,\r\n                        0\r\n                      )\r\n                  )}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Popularity</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.album.popularity}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Release Date</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.album.release_date}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Markets</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h5\" color=\"textSecondary\">\r\n                  {props.album.available_markets.length}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Grid container justify=\"space-between\">\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Genres:</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </ListItem>\r\n        </List>\r\n        <List disablePadding className={classes.nested}>\r\n          {props.album.genres.length > 0 ? (\r\n            <Box>\r\n              <ListItem disableGutters className={classes.nestedItem}>\r\n                <Grid container justify=\"space-between\">\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\" color=\"textSecondary\">\r\n                      {props.album.genres[0]}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n            </Box>\r\n          ) : (\r\n            <ListItem disableGutters className={classes.nestedItem}>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item>\r\n                  <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n                    No Genres Found\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </ListItem>\r\n          )}\r\n          {props.album.genres.slice(1).map((genre, index) => (\r\n            <Box key={index}>\r\n              <Divider />\r\n              <ListItem disableGutters className={classes.nestedItem}>\r\n                <Grid container justify=\"space-between\">\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n                      {genre}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ListItem>\r\n            </Box>\r\n          ))}\r\n        </List>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PreviewList from \"./PreviewList\";\r\nimport {\r\n  Card,\r\n  Typography,\r\n  CircularProgress,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\nimport SpotifyApiController from \"./SpotifyApiController\";\r\n\r\nlet useStyles = makeStyles(theme => ({\r\n  cardContainer: {\r\n    padding: 5\r\n  }\r\n}));\r\n\r\nexport default function ArtistTopTracks(props) {\r\n  const classes = useStyles();\r\n\r\n  const [tracks, setTracks] = useState(null);\r\n  const [trackRequestSent, setTrackRequestSent] = useState(false);\r\n\r\n  const buildString = stringArr => {\r\n    return stringArr.slice(1).reduce((prevString, nextString) => {\r\n      return `${prevString},${nextString}`;\r\n    }, stringArr[0]);\r\n  };\r\n\r\n  if (!trackRequestSent && props.album !== null) {\r\n    setTrackRequestSent(true);\r\n\r\n    let trackIds = props.album.tracks.items.map(track => track.id);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/tracks?ids=${encodeURIComponent(\r\n        buildString(trackIds)\r\n      )}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setTracks(res.data.tracks);\r\n    });\r\n  }\r\n\r\n  if (props.album === null) {\r\n    return (\r\n      <Card className={classes.cardContainer}>\r\n        <Typography variant=\"h5\" gutterBottom color=\"textSecondary\">\r\n          Tracks\r\n        </Typography>\r\n        <CircularProgress />\r\n      </Card>\r\n    );\r\n  }\r\n  return (\r\n    <Card>\r\n      <PreviewList limit={50} data={tracks} title=\"Tracks\" dataType=\"track\" />\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid, makeStyles } from \"@material-ui/core\";\r\nimport PageHeader from \"../components/PageHeader\";\r\nimport AlbumArtist from \"../components/AlbumArtist\";\r\nimport SpotifyApiController from \"../components/SpotifyApiController\";\r\nimport AlbumGeneralInfo from \"../components/AlbumGeneralInfo\";\r\nimport AlbumTracks from \"../components/AlbumTracks\";\r\nimport { config } from \"../config\";\r\n\r\nconst useStyles = makeStyles({\r\n  gridContainer: {\r\n    width: \"90%\",\r\n    margin: \"10px auto\"\r\n  }\r\n});\r\n\r\nexport default function Album() {\r\n  let { id } = useParams();\r\n  const classes = useStyles();\r\n\r\n  const [albumObj, setAlbumObj] = useState(null);\r\n  const [albumRequestSent, setAlbumRequestSent] = useState(false);\r\n\r\n  const getYear = album => {\r\n    return album.release_date.slice(0, 4);\r\n  };\r\n\r\n  if (!SpotifyApiController.isLoggedIn()) {\r\n    window.location.href = config.homePageURL;\r\n  }\r\n\r\n  if (!albumRequestSent) {\r\n    setAlbumRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/albums/${id}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setAlbumObj(res.data);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={3}\r\n      justify=\"center\"\r\n      className={classes.gridContainer}\r\n    >\r\n      <Grid item xs={12}>\r\n        <PageHeader\r\n          name={albumObj ? albumObj.name : null}\r\n          artists={albumObj ? albumObj.artists : null}\r\n          subtitle={albumObj ? getYear(albumObj) : null}\r\n          images={albumObj ? albumObj.images : null}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <AlbumArtist album={albumObj} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <AlbumGeneralInfo album={albumObj} />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <AlbumTracks album={albumObj} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport SpotifyApiController from \"../components/SpotifyApiController\";\r\nimport { Box, Grid, makeStyles } from \"@material-ui/core\";\r\nimport PreviewList from \"../components/PreviewList\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport { config } from \"../config\";\r\n\r\nconst useStyles = makeStyles({\r\n  searchBox: {\r\n    textAlign: \"center\",\r\n    padding: \"5vh 0\"\r\n  },\r\n  recommendationGrid: {\r\n    width: \"90%\",\r\n    margin: \"0 auto 5vh auto\"\r\n  }\r\n});\r\n\r\nexport default function GetStarted() {\r\n  let { query } = useParams();\r\n  const classes = useStyles();\r\n\r\n  const [searchResult, setSearchResult] = useState(null);\r\n  const [albumsResult, setAlbumsResult] = useState(null);\r\n  const [requestSent, setRequestSent] = useState(false);\r\n  const [albumRequestSent, setAlbumRequestSent] = useState(false);\r\n\r\n  const getAlbumIds = simplifiedAlbums => {\r\n    let albumArr = [];\r\n\r\n    for (let album of simplifiedAlbums) {\r\n      if (\r\n        album.album_type.toLowerCase() === \"album\" &&\r\n        !albumArr.includes(album.id)\r\n      ) {\r\n        albumArr.push(album.id);\r\n      }\r\n    }\r\n\r\n    return albumArr;\r\n  };\r\n\r\n  const buildString = stringArr => {\r\n    return stringArr.slice(1).reduce((prevString, nextString) => {\r\n      return `${prevString},${nextString}`;\r\n    }, stringArr[0]);\r\n  };\r\n\r\n  if (!SpotifyApiController.isLoggedIn()) {\r\n    window.location.href = config.homePageURL;\r\n  }\r\n\r\n  if (!requestSent) {\r\n    setRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/search?q=${query}&type=artist%2Calbum%2Ctrack`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setSearchResult(res.data);\r\n    });\r\n  }\r\n\r\n  if (searchResult && !albumRequestSent) {\r\n    setAlbumRequestSent(true);\r\n\r\n    SpotifyApiController.apiRequest(\r\n      \"GET\",\r\n      `https://api.spotify.com/v1/albums?market=from_token&ids=${encodeURIComponent(\r\n        buildString(getAlbumIds(searchResult.albums.items))\r\n      )}`,\r\n      sessionStorage.getItem(\"musicInfoSpotifyAccessToken\"),\r\n      {}\r\n    ).then(res => {\r\n      setAlbumsResult(res.data.albums);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Box className={classes.searchBox}>\r\n        <SearchBar main query={query} />\r\n      </Box>\r\n\r\n      <Grid\r\n        container\r\n        justify=\"space-around\"\r\n        spacing={3}\r\n        className={classes.recommendationGrid}\r\n      >\r\n        <Grid item xs={4}>\r\n          <PreviewList\r\n            limit={10}\r\n            title=\"Tracks\"\r\n            dataType=\"track\"\r\n            data={searchResult === null ? null : searchResult.tracks.items}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <PreviewList\r\n            limit={10}\r\n            title=\"Albums\"\r\n            dataType=\"album\"\r\n            data={albumsResult}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <PreviewList\r\n            limit={10}\r\n            title=\"Artists\"\r\n            dataType=\"artist\"\r\n            data={searchResult === null ? null : searchResult.artists.items}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Typography, Button, Box, makeStyles } from \"@material-ui/core\";\r\nimport { config } from \"../config\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    margin: 36,\r\n    padding: \"48px 48px 0 48px\"\r\n  },\r\n  section: {\r\n    margin: \"24px 0\"\r\n  }\r\n});\r\n\r\nexport default function About() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.container}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        About Musipedia\r\n      </Typography>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        Musipedia is a site that gives Spotify users access to any track,\r\n        artist, or album available in the Spotify library. Due to the use of\r\n        Spotify's web API, a valid Spotify account is required to use this\r\n        application.\r\n      </Typography>\r\n      <Box className={classes.section}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Artists\r\n        </Typography>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          An artist page will give you information about, as you can probably\r\n          guess, an artist. You will be able to explore their top tracks,\r\n          discography, and bits of general information about them, such as how\r\n          many Spotify followers they have, how popular they are, and what\r\n          genres they're associated with. Click the button below to be taken to\r\n          an artist's page!\r\n        </Typography>\r\n        <Button\r\n          color=\"primary\"\r\n          href={`${config.homePageURL}/artist/6eUKZXaKkcviH0Ku9w2n3V`}\r\n        >\r\n          Artist Page\r\n        </Button>\r\n      </Box>\r\n      <Box className={classes.section}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Albums\r\n        </Typography>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          The album page allows you to explore an album's artist, the track\r\n          list, and some general bits of relevant information, such as the\r\n          number of tracks, the duration, and the release date. Click the button\r\n          below to be taken to an album's page!\r\n        </Typography>\r\n        <Button\r\n          color=\"primary\"\r\n          href={`${config.homePageURL}/album/4LH4d3cOWNNsVw41Gqt2kv`}\r\n        >\r\n          Album Page\r\n        </Button>\r\n      </Box>\r\n      <Box className={classes.section}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Tracks\r\n        </Typography>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          The track page gives you the ability to explore a track's album, it's\r\n          artist, and general bits of information including a track's duration,\r\n          it's popularity, and it's release date. Audio features are also made\r\n          available, such as the track's key, tempo, and loudness. Spotify's\r\n          audio analysis abilities are also used to split a track up into\r\n          sections (ex. verse, chorus, etc.). You have the ability to listen to\r\n          each section of the track, as well as find information about it, such\r\n          as key, tempo, and loudness.\r\n        </Typography>\r\n        <Button\r\n          color=\"primary\"\r\n          href={`${config.homePageURL}/track/7oK9VyNzrYvRFo7nQEYkWN`}\r\n        >\r\n          Track Page\r\n        </Button>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\nimport GetStarted from \"./pages/GetStarted\";\nimport PageNotFound from \"./pages/PageNotFound\";\nimport HomePage from \"./pages/HomePage\";\nimport Track from \"./pages/Track\";\nimport Artist from \"./pages/Artist\";\nimport Album from \"./pages/Album\";\nimport SearchPage from \"./pages/SearchPage\";\nimport About from \"./pages/About\";\nimport {\n  Box,\n  createMuiTheme,\n  CssBaseline,\n  IconButton,\n  ThemeProvider,\n  AppBar,\n  Toolbar,\n  Typography,\n  makeStyles,\n  Tooltip\n} from \"@material-ui/core\";\nimport { Brightness4, Brightness7, ExitToApp, Info } from \"@material-ui/icons\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar\";\nimport { config } from \"./config\";\n\nconst useStyles = makeStyles({\n  titleBox: {\n    flex: 1\n  },\n  titleText: {\n    display: \"inline-flex\",\n    marginRight: \"2%\",\n    cursor: \"pointer\"\n  }\n});\n\n// Determines whether or not the search bar should appear within the app bar\nfunction showSearchBar() {\n  let parsedPath = window.location.pathname.split(\"/\");\n  let pathname;\n\n  if (parsedPath.length === 0) {\n    pathname = \"/\";\n  } else {\n    pathname = `/${parsedPath[1]}`;\n  }\n\n  return ![\"/\", \"/page-not-found\", \"/home\", \"/search\"].includes(pathname);\n}\n\n// Determines whether or not the logout button should appear within the app bar\nfunction showLogout() {\n  let parsedPath = window.location.pathname.split(\"/\");\n  let pathname;\n\n  if (parsedPath.length === 0) {\n    pathname = \"/\";\n  } else {\n    pathname = `/${parsedPath[1]}`;\n  }\n\n  return ![\"/\", \"/page-not-found\"].includes(pathname);\n}\n\nfunction App() {\n  const classes = useStyles();\n  const [themeSetting, setThemeSetting] = useState(\n    localStorage.getItem(\"musicInfoTheme\") !== null\n      ? localStorage.getItem(\"musicInfoTheme\")\n      : \"light\"\n  );\n\n  // Theme and Palette configuration\n  const theme = createMuiTheme({\n    palette: {\n      type: themeSetting,\n      primary: {\n        main: \"#C71585\"\n      }\n    }\n  });\n\n  const handleLogout = () => {\n    sessionStorage.clear();\n    window.location.href = config.homePageURL;\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <Box className={classes.titleBox}>\n            <Typography\n              variant=\"h4\"\n              className={classes.titleText}\n              onClick={() => {\n                if (\n                  window.location.pathname !== \"/\" &&\n                  window.location.pathname !== \"/page-not-found\"\n                ) {\n                  window.location.href = `${config.homePageURL}/home`;\n                } else {\n                  window.location.href = config.homePageURL;\n                }\n              }}\n            >\n              Musipedia\n            </Typography>\n            {showSearchBar() && <SearchBar />}\n          </Box>\n          <Tooltip title=\"About\">\n            <IconButton\n              edge=\"end\"\n              color=\"inherit\"\n              aria-label=\"About\"\n              onClick={() => {\n                window.location.href = `${config.homePageURL}/about`;\n              }}\n            >\n              <Info />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Toggle light/dark theme\">\n            <IconButton\n              edge=\"end\"\n              color=\"inherit\"\n              aria-label=\"Toggle light/dark theme\"\n              onClick={() => {\n                if (themeSetting === \"light\") {\n                  localStorage.setItem(\"musicInfoTheme\", \"dark\");\n                  setThemeSetting(\"dark\");\n                } else {\n                  localStorage.setItem(\"musicInfoTheme\", \"light\");\n                  setThemeSetting(\"light\");\n                }\n              }}\n            >\n              {themeSetting === \"light\" ? <Brightness4 /> : <Brightness7 />}\n            </IconButton>\n          </Tooltip>\n          {showLogout() && (\n            <Tooltip title=\"Log out\">\n              <IconButton\n                edge=\"end\"\n                color=\"inherit\"\n                aria-label=\"Log out\"\n                onClick={() => {\n                  handleLogout();\n                }}\n              >\n                <ExitToApp />\n              </IconButton>\n            </Tooltip>\n          )}\n        </Toolbar>\n      </AppBar>\n\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/musipedia/\">\n            <GetStarted />\n          </Route>\n          <Route path=\"/musipedia/home\">\n            <HomePage />\n          </Route>\n          <Route path=\"/musipedia/about\">\n            <About />\n          </Route>\n          <Route path=\"/musipedia/track/:id\">\n            <Track />\n          </Route>\n          <Route path=\"/musipedia/album/:id\">\n            <Album />\n          </Route>\n          <Route path=\"/musipedia/artist/:id\">\n            <Artist />\n          </Route>\n          <Route path=\"/musipedia/search/:query\">\n            <SearchPage />\n          </Route>\n          <Route path=\"/musipedia/page-not-found\">\n            <PageNotFound />\n          </Route>\n          <Redirect from=\"*\" to=\"/musipedia/page-not-found\" />\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}